"use strict";(self.webpackChunk_1j1s_etl_docs=self.webpackChunk_1j1s_etl_docs||[]).push([[120],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>v});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),m=a,v=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return t?i.createElement(v,r(r({ref:n},u),{},{components:t})):i.createElement(v,r({ref:n},u))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,r[1]=s;for(var d=2;d<o;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(7462),a=(t(7294),t(3905));const o={},r="Langages",s={unversionedId:"conventions/langages",id:"conventions/langages",title:"Langages",description:"Choix du langage",source:"@site/docs/conventions/langages.md",sourceDirName:"conventions",slug:"/conventions/langages",permalink:"/1j1s-etl/docs/conventions/langages",draft:!1,editUrl:"https://github.com/DNUM-SocialGouv/1j1s-etl/tree/main/docs/docs/docs/conventions/langages.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/1j1s-etl/docs/conventions/git"},next:{title:"\ud83c\udf31 Onboarding",permalink:"/1j1s-etl/docs/category/-onboarding"}},l={},d=[{value:"Choix du langage",id:"choix-du-langage",level:2},{value:"Principes g\xe9n\xe9raux",id:"principes-g\xe9n\xe9raux",level:2},{value:"Paradigme",id:"paradigme",level:3},{value:"Port\xe9e des m\xe9thodes et des attributs",id:"port\xe9e-des-m\xe9thodes-et-des-attributs",level:3},{value:"Fonctions pures",id:"fonctions-pures",level:3},{value:"Style de code",id:"style-de-code",level:2},{value:"Utilisation des ternaires",id:"utilisation-des-ternaires",level:3},{value:"<code>if</code> \xe0 une seule instruction",id:"if-\xe0-une-seule-instruction",level:3},{value:"<code>async / await</code> vs <code>.then().catch()</code>",id:"async--await-vs-thencatch",level:3},{value:"Interface vs Type",id:"interface-vs-type",level:3},{value:"D\xe9limitation d&#39;une instruction",id:"d\xe9limitation-dune-instruction",level:3},{value:"D\xe9claration des variables",id:"d\xe9claration-des-variables",level:3},{value:"Guillemets",id:"guillemets",level:3},{value:"Espace vs Tabulation pour l&#39;indentation",id:"espace-vs-tabulation-pour-lindentation",level:3},{value:"Convention de code",id:"convention-de-code",level:3},{value:"Nommage des fichiers",id:"nommage-des-fichiers",level:3},{value:"Typage dynamique",id:"typage-dynamique",level:3},{value:"Ts-ignore",id:"ts-ignore",level:3},{value:"Commentaires",id:"commentaires",level:3},{value:"Complexit\xe9s",id:"complexit\xe9s",level:2},{value:"Cyclomatique",id:"cyclomatique",level:3},{value:"Cognitive",id:"cognitive",level:3}],u={toc:d},c="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"langages"},"Langages"),(0,a.kt)("h2",{id:"choix-du-langage"},"Choix du langage"),(0,a.kt)("p",null,"Nous avons choisi de partir sur du ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeScript")," sur une plateforme ",(0,a.kt)("inlineCode",{parentName:"p"},"NodeJS"),". Ce choix s'explique par\nla comp\xe9tence de l'\xe9quipe sur la technologie et le fait que nous n'avons pas d'enjeux de performances\nparticuliers \xe0 date."),(0,a.kt)("h2",{id:"principes-g\xe9n\xe9raux"},"Principes g\xe9n\xe9raux"),(0,a.kt)("h3",{id:"paradigme"},"Paradigme"),(0,a.kt)("p",null,"Nous avons choisi de d\xe9velopper l'application en programmation orient\xe9e objet afin d'augmenter la\nlisibilit\xe9 du code et d'en adopter ses principes."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Exemple")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"class MaClasse {\n    public doSomething(): Promise<void> {\n        // do something ...\n    }\n}\n")),(0,a.kt)("h3",{id:"port\xe9e-des-m\xe9thodes-et-des-attributs"},"Port\xe9e des m\xe9thodes et des attributs"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 que les port\xe9es des m\xe9thodes et des attributs seront ","[to be continued...]"),(0,a.kt)("h3",{id:"fonctions-pures"},"Fonctions pures"),(0,a.kt)("p",null,"Dans la m\xeame veine, nous avons d\xe9cid\xe9 que nos fonctions devaient \xeatre des fonctions pures. C'est-\xe0-dire qu'une fonction\nne doit pas modifier ses param\xe8tres d'entr\xe9es et doit \xeatre idempotente."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Exemple")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"class Calculette {\n    public additionner(a: number, b: number): number {\n        return a + b;\n    }\n}\n")),(0,a.kt)("h2",{id:"style-de-code"},"Style de code"),(0,a.kt)("p",null,"Nous avons choisi d'utiliser ",(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/"},"ESLint")," pour appliquer des r\xe8gles concernant notre style de code.\nVous trouverez ci-dessous une liste non-exhaustive de r\xe8gles \xe0 appliquer dans nos d\xe9p\xf4ts."),(0,a.kt)("h3",{id:"utilisation-des-ternaires"},"Utilisation des ternaires"),(0,a.kt)("p",null,"Nous limitons l'utilisation des conditions ternaires lorsque la condition est tr\xe8s simple."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Exemple")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"isTrue(false)\n    ? true\n    : false;\n")),(0,a.kt)("p",null,"L'utilisation des niveaux suppl\xe9mentaires est proscrite."),(0,a.kt)("h3",{id:"if-\xe0-une-seule-instruction"},(0,a.kt)("inlineCode",{parentName:"h3"},"if")," \xe0 une seule instruction"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 qu'un ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," suivi d'une seule instruction devait quand m\xeame \xeatre wrapp\xe9 dans des accolades."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// Valide\nif (true) {\n    return false;\n}\n\n// Invalide\nif (true) \n    return false;\n")),(0,a.kt)("h3",{id:"async--await-vs-thencatch"},(0,a.kt)("inlineCode",{parentName:"h3"},"async / await")," vs ",(0,a.kt)("inlineCode",{parentName:"h3"},".then().catch()")),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 d'utiliser la version d'ES2015 pour g\xe9rer nos ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," afin d'am\xe9liorer la lisibilit\xe9 du code."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Exemple")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"function toto(): Promise<string> {\n    return new Promise((resolve) => {\n        resolve('toto');\n    });\n}\n\n// Valide\nasync function modern(): Promise<string> {\n    const tata = await toto();\n    return tata + \"tata\";\n}\n\n// Invalide\nasync function deprecated(): Promise<string> {\n    const tata = toto()\n        .then((value) => value)\n        .catch((e) => {/* ... */})\n}\n")),(0,a.kt)("h3",{id:"interface-vs-type"},"Interface vs Type"),(0,a.kt)("p",null,"Nous avons choisi d'utiliser des interfaces pour d\xe9finir un contrat \xe0 impl\xe9menter et des types si nous devons d\xe9finir\ndes structures de donn\xe9es qui n'ont pas de comportement."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// Valide\nexport type Personne = {\n    nom: string;\n    prenom: string;\n    age: number;\n}\n\n// Invalide\nexport interface Personne {\n    nom: string;\n    prenom: string;\n    age: number;\n}\n\n// Valide\nexport interface Contrat {\n    doSomething(a: number, b: string): void;\n}\n\n// Invalide\nexport type Contrat = {\n    doSomething: (a: number, b: string) => void;\n}\n")),(0,a.kt)("h3",{id:"d\xe9limitation-dune-instruction"},"D\xe9limitation d'une instruction"),(0,a.kt)("p",null,"Chaque ligne d'instruction devra se terminer par un point-virgule ",(0,a.kt)("inlineCode",{parentName:"p"},";"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// Valide\nconst toto = 'toto';\n\n// Invalide\nconst toto = 'toto'\n")),(0,a.kt)("h3",{id:"d\xe9claration-des-variables"},"D\xe9claration des variables"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 de d\xe9clarer les variables avec des ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," et ",(0,a.kt)("inlineCode",{parentName:"p"},"let"),".\nL'utilisation de ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," est proscrite."),(0,a.kt)("h3",{id:"guillemets"},"Guillemets"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 d'utiliser des guillemets (",(0,a.kt)("em",{parentName:"p"},"double quote"),") et guillemets obliques (",(0,a.kt)("em",{parentName:"p"},"backtick"),") dans le code."),(0,a.kt)("h3",{id:"espace-vs-tabulation-pour-lindentation"},"Espace vs Tabulation pour l'indentation"),(0,a.kt)("p",null,"Nous avons choisi d'utiliser le caract\xe8re tabulation plut\xf4t que les caract\xe8res d'espace pour notre indentation."),(0,a.kt)("h3",{id:"convention-de-code"},"Convention de code"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 d'utiliser la convention Java dans le code car elle est tr\xe8s r\xe9pandue et que nous sommes align\xe9s avec\ncette convention (",(0,a.kt)("a",{parentName:"p",href:"https://www.oracle.com/technetwork/java/codeconventions-150003.pdf"},"ici"),"). De plus, elle est\ncompatible avec notre choix de linter."),(0,a.kt)("h3",{id:"nommage-des-fichiers"},"Nommage des fichiers"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 d'adopter la convention ",(0,a.kt)("strong",{parentName:"p"},"kebab-case")," pour nommer nos fichiers. De plus, nous avons d\xe9cid\xe9 d'ajouter\nun suffixe pour d\xe9finir la nature de ce qui se trouve \xe0 l'int\xe9rieur."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Exemple")," : "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Valide : minio-storage.client.ts\n\nInvalide : MinioStorageClient.ts\n")),(0,a.kt)("h3",{id:"typage-dynamique"},"Typage dynamique"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 de ne pas utiliser le type ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," sauf en cas d'absolue n\xe9cessit\xe9."),(0,a.kt)("h3",{id:"ts-ignore"},"Ts-ignore"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 de ne pas utiliser l'annotation ",(0,a.kt)("inlineCode",{parentName:"p"},"ts-ignore"),"."),(0,a.kt)("h3",{id:"commentaires"},"Commentaires"),(0,a.kt)("p",null,"Nous avons d\xe9cid\xe9 d'\xe9crire du code auto-portant et de n'utiliser les commentaires qu'en cas de n\xe9cessit\xe9 et se limitant \xe0 1 \xe0 2 lignes. "),(0,a.kt)("h2",{id:"complexit\xe9s"},"Complexit\xe9s"),(0,a.kt)("h3",{id:"cyclomatique"},"Cyclomatique"),(0,a.kt)("p",null,"Nous avons fix\xe9 la limite maximale de complexit\xe9 cyclomatique \xe0 ",(0,a.kt)("strong",{parentName:"p"},"10")," afin de conserver des fonctions simples, am\xe9liorer la\nlisibilit\xe9 et la maintenance du code."),(0,a.kt)("h3",{id:"cognitive"},"Cognitive"),(0,a.kt)("p",null,"Nous avons fix\xe9 la limite maximale de complexit\xe9 cognitive \xe0 ",(0,a.kt)("strong",{parentName:"p"},"2")," afin de conserver des fonctions lisibles et de nous\nforcer \xe0 extraire la complexit\xe9 dans des sous-fonctions."))}p.isMDXComponent=!0}}]);